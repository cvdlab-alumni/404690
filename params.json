{"name":"Final-project-cg-site","body":"### The villa.\r\n\r\nThe Villa Forni Cerato is a 16th-century villa in Montecchio Precalcino,\r\nProvince of Vicenza, northern Italy. Its design is attributed to Andrea Palladio\r\nand his client is assumed to have been Girolamo Forni, a wealthy wood merchant\r\nwho supplied building material for a number of the Palladio's projects. The\r\nattribution to Palladio is partly on stylistic grounds, although this is a\r\ncomplicated issue - the building departs from the Palladian norms.\r\n\r\n![Front view of the villa](images/front_view.jpeg)\r\n\r\n##### History\r\n\r\nThe villa was probably built in the 1540s modifying an existing building on the\r\nsite. The double name Forni-Cerato, which it is always given, dates back to\r\n1610.In that year the building, which belonged to Girolamo Forni who can be\r\nregarded as having commissioned it, passed in accordance with a provision in his\r\nwill into the ownership of Giuseppe, Girolamo and Baldissera Cerato. Both its\r\nattribution to Palladio and the assumption that Girolamo Forni had it built\r\nremain a matter of speculation. The first reference to the architect being\r\nPalladio is in the 18th century (when it was mentioned by the architects\r\nFrancesco Muttoni and Ottavio Bertotti Scamozzi). However, modern research\r\nagrees almost unanimously with their opinion.\r\n\r\n### Villa Decomposition\r\nLooking at the villa can be seen that it is a highly symmetrical building.\r\nSo the model was build as much as possible only on half and add some pieces\r\nlater when making only half of that part was not the smartest move.\r\nMoreover the villa seems to be built in layers, so in the work-flow of making\r\nthe model was exactly that: layers.\r\n\r\n![Decomposition of the villa](images/Decomposition.jpg)\r\n\r\n### Details\r\nSome details like the banister's pillar has a well defined smooth form. For\r\nmodelling that form instead of doing it by eye I develop a little browser\r\napplication that let me retrace a Bézier curve in an image moving around the\r\ngeometrical handles and it print the point of all the them. This little\r\napplication was develop using Javascript and the `svg` tag using \r\n[jQuery](http://www.jquery.com) and [Raphaël](http://www.raphaeljs.com) as \r\nsupport library.\r\n\r\n![Use of the tool for the pillar model](images/curve_maker_pillar.jpg)\r\n\r\n![Use of the tool for the roof decoration](images/curve_maker_roof_decoration.jpg)\r\n\r\nThe application itself was the result of a very quick coding resulting an\r\napplication with no API and not so easy to use from external user, so I decided\r\nto not publish it.\r\n\r\n### Use of low level function\r\nTaking performance into account, I started looking into the Plasm.js language\r\nand saw that all function that take a Model as a paramether return a new Model\r\nwith the modification applied. For some function like `COLOR` I thought it was\r\npretty useless, so I use the OO interface underline the functional one and use\r\nthe `color` method on the model itself. The same approach was used for the\r\naffine transformation on the Model that I retain useless to clone such the\r\nstairway: there's only one stairway, why whould I wanna clone it to translate in\r\nthe right spot?\r\n\r\n#### Performance issue on STRUCT\r\nLooking into the Plasm.js code I had a better look to the function I was using\r\nin the project, so either to the STRUCT function. the code is really short\r\n\r\n```javascript\r\n/**\r\n* STRUCT\r\n* \r\n* @param {Array} items\r\n* @return {plasm.Model}\r\n* @api public\r\n*/\r\n\r\nfun.STRUCT = function (items) {\r\nvar transformations = function (o) {return o;};\r\nvar objects = [];\r\n\r\ntemp = [];\r\n\r\nitems.forEach(function (item) {\r\n  if (!(item instanceof plasm.Model) && \r\n      !(item instanceof plasm.Struct)) {\r\n    transformations = COMP2([transformations, item]);\r\n  } else {\r\n    // temp.push(APPLY([transformations, item]).clone());\r\n    objects.push(APPLY([transformations, item]));\r\n  }\r\n});\r\n\r\nreturn new plasm.Struct(objects, p);\r\n};\r\n```\r\n\r\nStudying the code as suggested by @Rayzen I commented out the line as showed\r\nabove since it clones all the models and then do nothing with them lowering the\r\nperformance, plus on every Model in the `items` Array will be applied the\r\ncomposition of all the preceding functions; but as mentioned earlier all the\r\nfunction return a clone of the model so a composition of N function will clone\r\nthe Model N times. When this is done on few pieces the performance issue is\r\nnot so marked, but when is done on many curved pieces like in my case the\r\nperformance would be an issue. So since my villa was built through layer from\r\nthe ground up to the roof and these little pieces are part of the roof I worked\r\naround this snag translating these parts through the OO method translate and put\r\nthese part at the begin of the `STRUCT` so it wasn't clone many times from the\r\nfunctions in the struct\r\n\r\n```javascript\r\nvar villa = STRUCT([\r\n    Roof_Decorations().translate([Z],[BASEMENT_HEIGHT+3*CURBE_HEIGHT+MIDDLE_WALL_HEIGHT+UPPER_WALL_HEIGHT]),\r\n    Base(),\r\n    Floor(), // that is the basement floor\r\n    stairs,\r\n    Basement(),\r\n    Front_Basement_Grid(),\r\n    ...\r\n```\r\n","tagline":"Presentation page for the final project of CG","note":"Don't delete this file! It's used internally to help with page regeneration.","google":""}